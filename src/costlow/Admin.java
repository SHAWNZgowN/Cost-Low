/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package costlow;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.awt.Color;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shawn
 */
public class Admin extends javax.swing.JFrame {
     private static final String JDBC_URL = "jdbc:mysql://127.0.0.1:3306/cost low";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "";
    private DefaultTableModel deliveredtblModel;
    private DefaultTableModel instocklModel;
    private DefaultTableModel customerModel;
    private DefaultTableModel paymentModel;
    private DefaultTableModel netsalesModel;
    private Timestamp lastRetrievedTimestamp = null;
    Color defaultcolor, clickedcolor, blue, white;
    /**
     * Creates new form Admiin
     */
    public Admin() {
        initComponents();
        
         deliveredtblModel = new DefaultTableModel(new Object[]{"ID", "Product", "Quantity", "Measurement"}, 0);
          instocklModel = new DefaultTableModel(new Object[]{"PRODUCT ID", "PRODUCT", "QUANTITY", "MEASUREMENT", "PRICE/QT."}, 0);
           customerModel = new DefaultTableModel(new Object[]{"Customer", "Address", "Contact"}, 0);
           paymentModel = new DefaultTableModel(new Object[]{"PRODUCT ID", "PRODUCT", "QUANTITY", "MEASUREMENT", "PRICE/QT.", "TOTAL"}, 0);
            netsalesModel = new DefaultTableModel(new Object[]{"CUSTOMER NAME", "DATE & TIME", "TOTAL PAYMENT"}, 0);
            
            showCurrentDate();
            
        defaultcolor = new Color(31,41,64);
        clickedcolor = new Color(20, 27, 45);
        blue = new Color(105,111,251);
        white = new Color(255, 255, 255);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jSpinner1 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel53 = new javax.swing.JLabel();
        netsalesPane = new javax.swing.JPanel();
        netsalesBtn = new javax.swing.JLabel();
        supplyPane = new javax.swing.JPanel();
        supplyBtn = new javax.swing.JLabel();
        instockPan = new javax.swing.JPanel();
        instockBtn = new javax.swing.JLabel();
        customerPan = new javax.swing.JPanel();
        customerBtn = new javax.swing.JLabel();
        ordersPan = new javax.swing.JPanel();
        ordersBtn = new javax.swing.JLabel();
        paymentPan = new javax.swing.JPanel();
        paymentBttn = new javax.swing.JLabel();
        logoutPan = new javax.swing.JPanel();
        logoutBtn = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator8 = new javax.swing.JSeparator();
        jPanel10 = new javax.swing.JPanel();
        panelswitch2 = new javax.swing.JLabel();
        PresentDate2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        salesPane = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableNetSales = new javax.swing.JTable();
        refreshSales = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        totaSales = new javax.swing.JLabel();
        deliveredPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        idField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        productField = new javax.swing.JTextField();
        quantityField = new javax.swing.JTextField();
        measurementField = new javax.swing.JTextField();
        priceField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        refBtn = new javax.swing.JButton();
        cmboxCat = new javax.swing.JComboBox<>();
        catID = new javax.swing.JLabel();
        jSeparator10 = new javax.swing.JSeparator();
        jSeparator11 = new javax.swing.JSeparator();
        jSeparator12 = new javax.swing.JSeparator();
        jSeparator13 = new javax.swing.JSeparator();
        jSeparator14 = new javax.swing.JSeparator();
        instockPane = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        instockTable = new javax.swing.JTable();
        refreshStock = new javax.swing.JButton();
        cmboxInStockCat = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        customerPane = new javax.swing.JPanel();
        textfldCustomer = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textfldAddress = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textfieldContact = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableCustomer = new javax.swing.JTable();
        addCust = new javax.swing.JButton();
        delCust = new javax.swing.JButton();
        refCust = new javax.swing.JButton();
        jSeparator15 = new javax.swing.JSeparator();
        jSeparator17 = new javax.swing.JSeparator();
        jSeparator18 = new javax.swing.JSeparator();
        jSeparator19 = new javax.swing.JSeparator();
        ordersPane = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        ordersTable = new javax.swing.JTable();
        comboCusName = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        refreshOrders = new javax.swing.JButton();
        orderAdd = new javax.swing.JButton();
        labelProdu = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        labelMeasure = new javax.swing.JLabel();
        lableMeasure = new javax.swing.JLabel();
        labelPrice = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        orderTotal = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        ordersCategory = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        labelProdId = new javax.swing.JLabel();
        labelOrderPrice1 = new javax.swing.JLabel();
        fieldQuantity = new javax.swing.JTextField();
        totalButton = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        paymentPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablePayment = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        labelCustName = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        labelTotalPay = new javax.swing.JLabel();
        customerDel = new javax.swing.JButton();
        paymentBtn = new javax.swing.JButton();
        buttonTotal = new javax.swing.JButton();
        cusProdID = new javax.swing.JLabel();
        cusQuan = new javax.swing.JLabel();

        jScrollPane3.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(20, 27, 45));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel15.setBackground(new java.awt.Color(31, 41, 64));
        jPanel15.setForeground(new java.awt.Color(255, 255, 255));

        jLabel53.setIcon(new javax.swing.ImageIcon(getClass().getResource("/costlow/pics/logo100.png"))); // NOI18N

        netsalesPane.setBackground(new java.awt.Color(31, 41, 64));

        netsalesBtn.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        netsalesBtn.setForeground(new java.awt.Color(255, 255, 255));
        netsalesBtn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        netsalesBtn.setText("NET SALES");
        netsalesBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                netsalesBtnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                netsalesBtnMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                netsalesBtnMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout netsalesPaneLayout = new javax.swing.GroupLayout(netsalesPane);
        netsalesPane.setLayout(netsalesPaneLayout);
        netsalesPaneLayout.setHorizontalGroup(
            netsalesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, netsalesPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(netsalesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        netsalesPaneLayout.setVerticalGroup(
            netsalesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(netsalesPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(netsalesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addContainerGap())
        );

        supplyPane.setBackground(new java.awt.Color(31, 41, 64));

        supplyBtn.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        supplyBtn.setForeground(new java.awt.Color(255, 255, 255));
        supplyBtn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        supplyBtn.setText("SUPPLIES");
        supplyBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                supplyBtnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                supplyBtnMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                supplyBtnMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout supplyPaneLayout = new javax.swing.GroupLayout(supplyPane);
        supplyPane.setLayout(supplyPaneLayout);
        supplyPaneLayout.setHorizontalGroup(
            supplyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, supplyPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(supplyBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        supplyPaneLayout.setVerticalGroup(
            supplyPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(supplyPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(supplyBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addContainerGap())
        );

        instockPan.setBackground(new java.awt.Color(31, 41, 64));

        instockBtn.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        instockBtn.setForeground(new java.awt.Color(255, 255, 255));
        instockBtn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        instockBtn.setText("IN-STOCK");
        instockBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                instockBtnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                instockBtnMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                instockBtnMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout instockPanLayout = new javax.swing.GroupLayout(instockPan);
        instockPan.setLayout(instockPanLayout);
        instockPanLayout.setHorizontalGroup(
            instockPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, instockPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instockBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        instockPanLayout.setVerticalGroup(
            instockPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instockPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instockBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addContainerGap())
        );

        customerPan.setBackground(new java.awt.Color(31, 41, 64));

        customerBtn.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        customerBtn.setForeground(new java.awt.Color(255, 255, 255));
        customerBtn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        customerBtn.setText("CUSTOMERS");
        customerBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerBtnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                customerBtnMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                customerBtnMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout customerPanLayout = new javax.swing.GroupLayout(customerPan);
        customerPan.setLayout(customerPanLayout);
        customerPanLayout.setHorizontalGroup(
            customerPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        customerPanLayout.setVerticalGroup(
            customerPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addContainerGap())
        );

        ordersPan.setBackground(new java.awt.Color(31, 41, 64));

        ordersBtn.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        ordersBtn.setForeground(new java.awt.Color(255, 255, 255));
        ordersBtn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ordersBtn.setText("ORDERS");
        ordersBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordersBtnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ordersBtnMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ordersBtnMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout ordersPanLayout = new javax.swing.GroupLayout(ordersPan);
        ordersPan.setLayout(ordersPanLayout);
        ordersPanLayout.setHorizontalGroup(
            ordersPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ordersPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ordersBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        ordersPanLayout.setVerticalGroup(
            ordersPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ordersBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addContainerGap())
        );

        paymentPan.setBackground(new java.awt.Color(31, 41, 64));

        paymentBttn.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        paymentBttn.setForeground(new java.awt.Color(255, 255, 255));
        paymentBttn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        paymentBttn.setText("PAYMENT");
        paymentBttn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentBttnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                paymentBttnMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                paymentBttnMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout paymentPanLayout = new javax.swing.GroupLayout(paymentPan);
        paymentPan.setLayout(paymentPanLayout);
        paymentPanLayout.setHorizontalGroup(
            paymentPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paymentPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paymentBttn, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        paymentPanLayout.setVerticalGroup(
            paymentPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paymentBttn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addContainerGap())
        );

        logoutPan.setBackground(new java.awt.Color(31, 41, 64));

        logoutBtn.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        logoutBtn.setForeground(new java.awt.Color(255, 255, 255));
        logoutBtn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        logoutBtn.setText("LOG OUT");
        logoutBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutBtnMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logoutBtnMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                logoutBtnMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout logoutPanLayout = new javax.swing.GroupLayout(logoutPan);
        logoutPan.setLayout(logoutPanLayout);
        logoutPanLayout.setHorizontalGroup(
            logoutPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, logoutPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        logoutPanLayout.setVerticalGroup(
            logoutPanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logoutPanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSeparator1.setBackground(new java.awt.Color(105, 111, 251));
        jSeparator1.setForeground(new java.awt.Color(105, 111, 251));

        jSeparator2.setForeground(new java.awt.Color(105, 111, 251));

        jSeparator3.setForeground(new java.awt.Color(105, 111, 251));

        jSeparator4.setForeground(new java.awt.Color(105, 111, 251));

        jSeparator5.setForeground(new java.awt.Color(105, 111, 251));

        jSeparator6.setForeground(new java.awt.Color(105, 111, 251));

        jSeparator7.setForeground(new java.awt.Color(105, 111, 251));

        jSeparator8.setBackground(new java.awt.Color(105, 111, 251));
        jSeparator8.setForeground(new java.awt.Color(105, 111, 251));

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoutPan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator4)
                    .addComponent(jSeparator5)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator7)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(netsalesPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(instockPan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(customerPan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(ordersPan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(paymentPan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                                .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                                .addComponent(supplyPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addComponent(jSeparator8, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(netsalesPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(supplyPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(instockPan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerPan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ordersPan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paymentPan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logoutPan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 670));

        jPanel10.setBackground(new java.awt.Color(20, 27, 45));
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelswitch2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        panelswitch2.setForeground(new java.awt.Color(255, 255, 255));
        panelswitch2.setText("-");
        jPanel10.add(panelswitch2, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 0, 155, 36));

        PresentDate2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        PresentDate2.setForeground(new java.awt.Color(255, 255, 255));
        PresentDate2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PresentDate2.setText("-");
        jPanel10.add(PresentDate2, new org.netbeans.lib.awtextra.AbsoluteConstraints(552, 12, 75, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("DATE:");
        jPanel10.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 4, 88, 36));

        jPanel1.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 670, 50));

        salesPane.setBackground(new java.awt.Color(31, 41, 64));

        tableNetSales.setBackground(new java.awt.Color(20, 27, 45));
        tableNetSales.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tableNetSales.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tableNetSales.setForeground(new java.awt.Color(255, 255, 255));
        tableNetSales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "CUSTOMER NAME", "DATE & TIME", "TOTAL PAYEMNT"
            }
        ));
        tableNetSales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableNetSalesMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tableNetSales);

        refreshSales.setBackground(new java.awt.Color(105, 111, 251));
        refreshSales.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        refreshSales.setText("REFRESH");
        refreshSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshSalesActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("NET SALES:");

        totaSales.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totaSales.setForeground(new java.awt.Color(255, 255, 255));
        totaSales.setText("-");

        javax.swing.GroupLayout salesPaneLayout = new javax.swing.GroupLayout(salesPane);
        salesPane.setLayout(salesPaneLayout);
        salesPaneLayout.setHorizontalGroup(
            salesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, salesPaneLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(salesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(salesPaneLayout.createSequentialGroup()
                        .addComponent(refreshSales, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(189, 189, 189)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(totaSales, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );
        salesPaneLayout.setVerticalGroup(
            salesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salesPaneLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(salesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshSales, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totaSales, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("tab5", salesPane);

        deliveredPane.setBackground(new java.awt.Color(31, 41, 64));

        stockTable.setBackground(new java.awt.Color(20, 27, 45));
        stockTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        stockTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        stockTable.setForeground(new java.awt.Color(255, 255, 255));
        stockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "PRODUCT", "QUANTITY", "MEASUREMENT"
            }
        ));
        stockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stockTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(stockTable);
        if (stockTable.getColumnModel().getColumnCount() > 0) {
            stockTable.getColumnModel().getColumn(0).setHeaderValue("ID");
        }

        idField.setBackground(new java.awt.Color(31, 41, 64));
        idField.setForeground(new java.awt.Color(255, 255, 255));
        idField.setBorder(null);
        idField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ID");

        productField.setBackground(new java.awt.Color(31, 41, 64));
        productField.setForeground(new java.awt.Color(255, 255, 255));
        productField.setBorder(null);

        quantityField.setBackground(new java.awt.Color(31, 41, 64));
        quantityField.setForeground(new java.awt.Color(255, 255, 255));
        quantityField.setBorder(null);

        measurementField.setBackground(new java.awt.Color(31, 41, 64));
        measurementField.setForeground(new java.awt.Color(255, 255, 255));
        measurementField.setBorder(null);

        priceField.setBackground(new java.awt.Color(31, 41, 64));
        priceField.setForeground(new java.awt.Color(255, 255, 255));
        priceField.setBorder(null);

        jLabel2.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("PRODUCT");

        jLabel3.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("QUANTITY");

        jLabel5.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("MEASUREMENT");

        jLabel6.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("PRICE");

        jLabel7.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("CATEGORY");

        addBtn.setBackground(new java.awt.Color(105, 111, 251));
        addBtn.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        delBtn.setBackground(new java.awt.Color(105, 111, 251));
        delBtn.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        delBtn.setText("DELETE");
        delBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBtnActionPerformed(evt);
            }
        });

        refBtn.setBackground(new java.awt.Color(105, 111, 251));
        refBtn.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        refBtn.setText("REFRESH");
        refBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refBtnActionPerformed(evt);
            }
        });

        cmboxCat.setBackground(new java.awt.Color(31, 41, 64));
        cmboxCat.setForeground(new java.awt.Color(255, 255, 255));
        cmboxCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FOOD", "HOUSEHOLD ESSENTIALS", "ENTERTAINMENT", "BEAUTY & FASHION" }));

        catID.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout deliveredPaneLayout = new javax.swing.GroupLayout(deliveredPane);
        deliveredPane.setLayout(deliveredPaneLayout);
        deliveredPaneLayout.setHorizontalGroup(
            deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deliveredPaneLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(deliveredPaneLayout.createSequentialGroup()
                .addGroup(deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deliveredPaneLayout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(refBtn)
                        .addGap(18, 18, 18)
                        .addComponent(delBtn)
                        .addGap(18, 18, 18)
                        .addComponent(addBtn))
                    .addGroup(deliveredPaneLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addGroup(deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator10)
                            .addComponent(idField)
                            .addComponent(quantityField)
                            .addComponent(productField)
                            .addComponent(measurementField)
                            .addComponent(priceField)
                            .addComponent(jSeparator11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator12)
                            .addGroup(deliveredPaneLayout.createSequentialGroup()
                                .addComponent(cmboxCat, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(catID, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(125, 125, 125))
                            .addComponent(jSeparator13)
                            .addComponent(jSeparator14))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        deliveredPaneLayout.setVerticalGroup(
            deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deliveredPaneLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(4, 4, 4)
                .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(1, 1, 1)
                .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(measurementField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(cmboxCat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(catID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addGroup(deliveredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(delBtn)
                    .addComponent(refBtn))
                .addGap(41, 41, 41))
        );

        jTabbedPane1.addTab("tab1", deliveredPane);

        instockPane.setBackground(new java.awt.Color(31, 41, 64));

        instockTable.setBackground(new java.awt.Color(20, 27, 45));
        instockTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        instockTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        instockTable.setForeground(new java.awt.Color(255, 255, 255));
        instockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "PRODUCT", "QUANTITY", "MEASUREMENT", "PRICE/QtT"
            }
        ));
        instockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                instockTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(instockTable);

        refreshStock.setBackground(new java.awt.Color(105, 111, 251));
        refreshStock.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        refreshStock.setText("REFRESH");
        refreshStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshStockActionPerformed(evt);
            }
        });

        cmboxInStockCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FOOD", "HOUSEHOLD ESSENTIALS", "ENTERTAINMENT", "BEAUTY & FASHION" }));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("CATEGORY:");

        javax.swing.GroupLayout instockPaneLayout = new javax.swing.GroupLayout(instockPane);
        instockPane.setLayout(instockPaneLayout);
        instockPaneLayout.setHorizontalGroup(
            instockPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instockPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(instockPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(instockPaneLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(instockPaneLayout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmboxInStockCat, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147)
                        .addComponent(refreshStock)
                        .addGap(36, 36, 36))))
        );
        instockPaneLayout.setVerticalGroup(
            instockPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instockPaneLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addGroup(instockPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshStock, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmboxInStockCat, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42))
        );

        jTabbedPane1.addTab("tab3", instockPane);

        customerPane.setBackground(new java.awt.Color(31, 41, 64));

        textfldCustomer.setBackground(new java.awt.Color(31, 41, 64));
        textfldCustomer.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        textfldCustomer.setForeground(new java.awt.Color(255, 255, 255));
        textfldCustomer.setBorder(null);

        jLabel4.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("CUSTOMER NAME");

        textfldAddress.setBackground(new java.awt.Color(31, 41, 64));
        textfldAddress.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        textfldAddress.setForeground(new java.awt.Color(255, 255, 255));
        textfldAddress.setBorder(null);

        jLabel8.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("ADDRESS");

        textfieldContact.setBackground(new java.awt.Color(31, 41, 64));
        textfieldContact.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        textfieldContact.setForeground(new java.awt.Color(255, 255, 255));
        textfieldContact.setBorder(null);

        jLabel10.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("CONTACT NUMBER");

        tableCustomer.setBackground(new java.awt.Color(20, 27, 45));
        tableCustomer.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tableCustomer.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tableCustomer.setForeground(new java.awt.Color(255, 255, 255));
        tableCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "CUSTOMER NAME", "ADDRESS", "CONTACT NO."
            }
        ));
        tableCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCustomerMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tableCustomer);
        if (tableCustomer.getColumnModel().getColumnCount() > 0) {
            tableCustomer.getColumnModel().getColumn(0).setHeaderValue("ID");
        }

        addCust.setBackground(new java.awt.Color(105, 111, 251));
        addCust.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        addCust.setText("ADD");
        addCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustActionPerformed(evt);
            }
        });

        delCust.setBackground(new java.awt.Color(105, 111, 251));
        delCust.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        delCust.setText("DELETE");
        delCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delCustActionPerformed(evt);
            }
        });

        refCust.setBackground(new java.awt.Color(105, 111, 251));
        refCust.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        refCust.setText("REFRESH");
        refCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refCustActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customerPaneLayout = new javax.swing.GroupLayout(customerPane);
        customerPane.setLayout(customerPaneLayout);
        customerPaneLayout.setHorizontalGroup(
            customerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPaneLayout.createSequentialGroup()
                .addGroup(customerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerPaneLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(customerPaneLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addGroup(customerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textfldCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator15, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(customerPaneLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(customerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textfldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(customerPaneLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jSeparator19, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(customerPaneLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(customerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textfieldContact, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(customerPaneLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(customerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator17, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(customerPaneLayout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(addCust)
                        .addGap(18, 18, 18)
                        .addComponent(delCust)
                        .addGap(18, 18, 18)
                        .addComponent(refCust)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        customerPaneLayout.setVerticalGroup(
            customerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPaneLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(customerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(customerPaneLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(textfldCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jSeparator15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3)
                .addGroup(customerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(customerPaneLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(textfldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jSeparator19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(customerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(customerPaneLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jSeparator18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(textfieldContact, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jSeparator17, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(70, 70, 70)
                .addGroup(customerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addCust)
                    .addComponent(delCust)
                    .addComponent(refCust))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab2", customerPane);

        ordersPane.setBackground(new java.awt.Color(31, 41, 64));

        ordersTable.setBackground(new java.awt.Color(20, 27, 45));
        ordersTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ordersTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ordersTable.setForeground(new java.awt.Color(255, 255, 255));
        ordersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT", "QUANTITY", "MEASUREMENT", "PRICE/QT."
            }
        ));
        ordersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordersTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(ordersTable);

        comboCusName.setBackground(new java.awt.Color(31, 41, 64));
        comboCusName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboCusName.setForeground(new java.awt.Color(255, 255, 255));
        comboCusName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCusNameActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("CUSTOMER NAME:");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("QUANTITY:");

        refreshOrders.setBackground(new java.awt.Color(105, 111, 251));
        refreshOrders.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        refreshOrders.setText("REFRESH");
        refreshOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshOrdersActionPerformed(evt);
            }
        });

        orderAdd.setBackground(new java.awt.Color(105, 111, 251));
        orderAdd.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        orderAdd.setText("ADD");
        orderAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderAddActionPerformed(evt);
            }
        });

        labelProdu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelProdu.setForeground(new java.awt.Color(255, 255, 255));

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("PRODUCT:");

        labelMeasure.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelMeasure.setForeground(new java.awt.Color(255, 255, 255));
        labelMeasure.setText("MEASUREMENT:");

        lableMeasure.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lableMeasure.setForeground(new java.awt.Color(255, 255, 255));

        labelPrice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelPrice.setForeground(new java.awt.Color(255, 255, 255));
        labelPrice.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelPrice.setText("PRICE:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("TOTAL PRICE:");

        orderTotal.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        orderTotal.setForeground(new java.awt.Color(255, 255, 255));

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("CATEGORY:");

        ordersCategory.setBackground(new java.awt.Color(31, 41, 64));
        ordersCategory.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ordersCategory.setForeground(new java.awt.Color(255, 255, 255));
        ordersCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FOOD", "HOUSEHOLD ESSENTIALS", "ENTERTAINMENT", "BEAUTY & FASHION" }));

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("PRDOUCT ID:");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        labelProdId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelProdId.setForeground(new java.awt.Color(255, 255, 255));

        labelOrderPrice1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelOrderPrice1.setForeground(new java.awt.Color(255, 255, 255));

        fieldQuantity.setBackground(new java.awt.Color(31, 41, 64));
        fieldQuantity.setForeground(new java.awt.Color(255, 255, 255));
        fieldQuantity.setBorder(null);

        totalButton.setBackground(new java.awt.Color(105, 111, 251));
        totalButton.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        totalButton.setText("TOTAL PRICE");
        totalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ordersPaneLayout = new javax.swing.GroupLayout(ordersPane);
        ordersPane.setLayout(ordersPaneLayout);
        ordersPaneLayout.setHorizontalGroup(
            ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersPaneLayout.createSequentialGroup()
                .addGroup(ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(labelProdId, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(labelProdu, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(labelMeasure)
                        .addGap(13, 13, 13)
                        .addComponent(lableMeasure, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(469, 469, 469)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(labelPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(labelOrderPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(fieldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel16)
                        .addGap(12, 12, 12)
                        .addComponent(comboCusName, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(ordersCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orderTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(refreshOrders)
                        .addGap(18, 18, 18)
                        .addComponent(totalButton)
                        .addGap(18, 18, 18)
                        .addComponent(orderAdd)))
                .addGap(16, 16, 16))
        );
        ordersPaneLayout.setVerticalGroup(
            ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersPaneLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addGroup(ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(labelProdId))
                .addGap(15, 15, 15)
                .addGroup(ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(labelProdu))
                .addGap(15, 15, 15)
                .addGroup(ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelMeasure)
                    .addComponent(lableMeasure))
                .addGap(5, 5, 5)
                .addComponent(jLabel24)
                .addGap(10, 10, 10)
                .addGroup(ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelPrice)
                    .addComponent(labelOrderPrice1))
                .addGap(15, 15, 15)
                .addGroup(ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel17))
                    .addComponent(fieldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ordersPaneLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel16))
                    .addComponent(comboCusName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ordersCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82)
                .addGroup(ordersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshOrders)
                    .addComponent(totalButton)
                    .addComponent(orderAdd)))
        );

        jTabbedPane1.addTab("tab4", ordersPane);

        paymentPanel.setBackground(new java.awt.Color(31, 41, 64));

        tablePayment.setBackground(new java.awt.Color(20, 27, 45));
        tablePayment.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tablePayment.setForeground(new java.awt.Color(255, 255, 255));
        tablePayment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "PRODUCT", "QUANITY", "MEASUREMENT", "PRICE/QT.", "TOTAL"
            }
        ));
        tablePayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePaymentMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tablePayment);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("CUSTOMER NAME:");

        labelCustName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelCustName.setForeground(new java.awt.Color(255, 255, 255));
        labelCustName.setText("-");

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("TOTAL PAYMENT:");

        jLabel27.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("$");

        labelTotalPay.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        labelTotalPay.setForeground(new java.awt.Color(255, 255, 255));
        labelTotalPay.setText("-");

        customerDel.setBackground(new java.awt.Color(105, 111, 251));
        customerDel.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        customerDel.setText("DELETE");
        customerDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerDelActionPerformed(evt);
            }
        });

        paymentBtn.setBackground(new java.awt.Color(105, 111, 251));
        paymentBtn.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        paymentBtn.setText("PAY");
        paymentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentBtnActionPerformed(evt);
            }
        });

        buttonTotal.setBackground(new java.awt.Color(105, 111, 251));
        buttonTotal.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        buttonTotal.setText("TOTAL PAYMENT");
        buttonTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTotalActionPerformed(evt);
            }
        });

        cusProdID.setBackground(new java.awt.Color(31, 41, 64));
        cusProdID.setForeground(new java.awt.Color(31, 41, 64));

        cusQuan.setBackground(new java.awt.Color(31, 41, 64));
        cusQuan.setForeground(new java.awt.Color(31, 41, 64));

        javax.swing.GroupLayout paymentPanelLayout = new javax.swing.GroupLayout(paymentPanel);
        paymentPanel.setLayout(paymentPanelLayout);
        paymentPanelLayout.setHorizontalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelCustName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(172, 172, 172))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paymentPanelLayout.createSequentialGroup()
                        .addComponent(cusProdID, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(cusQuan, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelTotalPay, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paymentPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(customerDel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonTotal)
                .addGap(18, 18, 18)
                .addComponent(paymentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(144, 144, 144))
        );
        paymentPanelLayout.setVerticalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(labelCustName))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27)
                    .addComponent(labelTotalPay, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cusProdID)
                    .addComponent(cusQuan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerDel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        jTabbedPane1.addTab("tab6", paymentPanel);

        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 630, 630));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void showCurrentDate() {
        // Get the current date
        LocalDate currentDate = LocalDate.now();

        // Format the date as a string
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-dd-yyyy");
        String formattedDate = currentDate.format(formatter);

        // Update the JLabel with the formatted date
        PresentDate2.setText(formattedDate);
    }
    
    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idFieldActionPerformed

    private void refBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refBtnActionPerformed
        dataRetrieval();
    }//GEN-LAST:event_refBtnActionPerformed

     private void dataRetrieval() {
    String sql = "SELECT product_id, product_name, quantity, measurement, timestamp_column FROM delivered_products " +
                 "ORDER BY timestamp_column DESC";

    try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
         Statement statement = connection.createStatement();
         ResultSet resultSet = statement.executeQuery(sql)) {

        // Check if there are new records based on timestamp or unique identifier
        if (resultSet.next()) {
            Timestamp latestTimestamp = resultSet.getTimestamp("timestamp_column");

            // Compare the latest timestamp with the last retrieved timestamp
            if (lastRetrievedTimestamp == null || lastRetrievedTimestamp.before(latestTimestamp)) {
                // Clear the existing data in the table model
                deliveredtblModel.setRowCount(0);

                // Populate the model with retrieved data
                do {
                    int id = resultSet.getInt("product_id");
                    String product = resultSet.getString("product_name");
                    int quantity = resultSet.getInt("quantity");
                    String measurement = resultSet.getString("measurement");

                    deliveredtblModel.addRow(new Object[]{id, product, quantity, measurement});
                } while (resultSet.next());

                // Set the model to the JTable
                stockTable.setModel(deliveredtblModel);

                // Update the last retrieved timestamp
                lastRetrievedTimestamp = latestTimestamp;
            } else {
                // Data is not updated, no need to refresh
                System.out.println("No new data to refresh.");
            }
        } else {
            // ResultSet is empty, no need to refresh
            System.out.println("No data available in the database.");
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving data from the database.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void stockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockTableMouseClicked
      int selectedRowIndex = stockTable.rowAtPoint(evt.getPoint());

            // Check if a valid row is clicked
            if (selectedRowIndex != -1) {
                // Assuming the columns are in order: ID, Product, Quantity, Measurement
                Object id = stockTable.getValueAt(selectedRowIndex, 0);
                Object product = stockTable.getValueAt(selectedRowIndex, 1);
                Object quantity = stockTable.getValueAt(selectedRowIndex, 2);
                Object measurement = stockTable.getValueAt(selectedRowIndex, 3);

                // Set the values in the JTextFields
                idField.setText(id.toString());
                productField.setText(product.toString());
                quantityField.setText(quantity.toString());
                measurementField.setText(measurement.toString());
            }
    }//GEN-LAST:event_stockTableMouseClicked

    private void instockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instockTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_instockTableMouseClicked

    private void delBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBtnActionPerformed
        deleteSelectedRow();
    }//GEN-LAST:event_delBtnActionPerformed

     private void deleteSelectedRow() {
        // Get the selected row index
        int selectedRowIndex = stockTable.getSelectedRow();

        // Check if a row is selected
        if (selectedRowIndex != -1) {
            // Get data from the selected row
            Object productId = stockTable.getValueAt(selectedRowIndex, 0);

            // SQL query to delete the row based on the product_id
            String sql = "DELETE FROM delivered_products WHERE product_id = ?";

            try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
                 PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

                // Set the parameter in the PreparedStatement
                preparedStatement.setObject(1, productId);

                // Execute the DELETE query
                int affectedRows = preparedStatement.executeUpdate();

                // Check if the deletion was successful
                if (affectedRows > 0) {
                    // Remove the selected row from the table model
                    deliveredtblModel.removeRow(selectedRowIndex);
                    JOptionPane.showMessageDialog(null, "Row deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to delete row from the database.", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error deleting data from the database.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No row selected.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
       
        
        addProductToDatabase();
        deleteSelectedProd();
    }//GEN-LAST:event_addBtnActionPerformed

     private void deleteSelectedProd() {
        // Get the selected row index
        int selectedRowIndex = stockTable.getSelectedRow();

        // Check if a row is selected
        if (selectedRowIndex != -1) {
            // Get data from the selected row
            Object productId = stockTable.getValueAt(selectedRowIndex, 0);

            // SQL query to delete the row based on the product_id
            String sql = "DELETE FROM delivered_products WHERE product_id = ?";

            try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
                 PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

                // Set the parameter in the PreparedStatement
                preparedStatement.setObject(1, productId);

                // Execute the DELETE query
                int affectedRows = preparedStatement.executeUpdate();

                // Check if the deletion was successful
                if (affectedRows > 0) {
                    // Remove the selected row from the table model
                    deliveredtblModel.removeRow(selectedRowIndex);
                    JOptionPane.showMessageDialog(null, "PRODUCT SUCCESFULLY ADDED", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "ERROR: PRODUCT NOT ADDED", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error deleting data from the database.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No row selected.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private void addProductToDatabase() {
        String sql = "INSERT INTO categorized_products (prod_id, product_name, quantity, measurement, category, price) " +
                     "VALUES (?, ?, ?, ?, ?, ?)";

        try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

            // Set parameters in the PreparedStatement
            preparedStatement.setString(1, idField.getText());
            preparedStatement.setString(2, productField.getText());
            preparedStatement.setInt(3, Integer.parseInt(quantityField.getText()));
            preparedStatement.setString(4, measurementField.getText());
            preparedStatement.setString(5, cmboxCat.getSelectedItem().toString());
            preparedStatement.setDouble(6, Double.parseDouble(priceField.getText()));

            // Execute the INSERT query
            int affectedRows = preparedStatement.executeUpdate();

            // Check if the insertion was successful
            if (affectedRows > 0) {
    // Product added successfully
    JOptionPane.showMessageDialog(
            this,
            "Product added to the database successfully.",
            "Success",
            JOptionPane.INFORMATION_MESSAGE);

    // Optionally, you can clear the text fields after successful insertion
    clearFields();
} else {
    // Failed to add product
    JOptionPane.showMessageDialog(
            this,
            "Failed to add product to the database.",
            "Error",
            JOptionPane.ERROR_MESSAGE);
}
        } catch (SQLException ex) {
            ex.printStackTrace();
            System.out.println("Error adding product to the database.");
        }
    }
   
    private void clearFields() {
        idField.setText("");
        productField.setText("");
        quantityField.setText("");
        measurementField.setText("");
        priceField.setText("");
        // Optionally, you can set the combo box to its default state
        cmboxCat.setSelectedIndex(0);
    }
    
    private void refreshStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshStockActionPerformed
         String selectedCategory = getCategory();
         insStockRetrieval(selectedCategory);
         deleteRowsWithZeroQuantity();
         
    }//GEN-LAST:event_refreshStockActionPerformed
    
    private void deleteRowsWithZeroQuantity() {
        String sql = "DELETE FROM categorized_products WHERE quantity = 0";

        try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            int rowsAffected = preparedStatement.executeUpdate();
            System.out.println(rowsAffected + " rows deleted.");
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception as needed
        }
    }
    
     private void insStockRetrieval(String category) {
    // SQL query with JOIN and WHERE to retrieve data based on EmployeeId
    String sql = "SELECT cp.prod_id, cp.product_name, cp.quantity, cp.measurement, cp.price " +
                 "FROM categorized_products cp " +
                 "JOIN categories c ON cp.category = c.category  " +
                 "WHERE cp.category = ?";

    try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
         PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

        // Set the parameter in the PreparedStatement
        preparedStatement.setString(1, category);

        // Execute the query
        try (ResultSet resultSet = preparedStatement.executeQuery()) {
            // Clear existing data in the table model
            instocklModel.setRowCount(0);

            // Populate the model with retrieved data
            while (resultSet.next()) {
                String prod_id = resultSet.getString("prod_id");
                String product_name = resultSet.getString("product_name");
                String quantity = resultSet.getString("quantity");
                String measurement = resultSet.getString("measurement");
                String price = resultSet.getString("price");

                instocklModel.addRow(new Object[]{prod_id, product_name, quantity, measurement, price});
            }

            // Set the model to the JTable
            instockTable.setModel(instocklModel);
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving data from the database.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private String getCategory() {
        String selectedItem = cmboxInStockCat.getSelectedItem().toString();

        // Convert the entire string to uppercase
        return selectedItem.toUpperCase();
    }
    
    private void tableCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCustomerMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableCustomerMouseClicked

    private void addCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustActionPerformed
        addCustomerToDatabase();
        clearCustFields();
    }//GEN-LAST:event_addCustActionPerformed
    
     private void addCustomerToDatabase() {
        String sql = "INSERT INTO customers (customer_name, address, contact_no) " +
                     "VALUES (?, ?, ?)";

        try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

            // Set parameters in the PreparedStatement
            preparedStatement.setString(1, textfldCustomer.getText());
            preparedStatement.setString(2, textfldAddress.getText());
            preparedStatement.setInt(3, Integer.parseInt(textfieldContact.getText()));
            

            // Execute the INSERT query
            int affectedRows = preparedStatement.executeUpdate();

            // Check if the insertion was successful
            if (affectedRows > 0) {
                System.out.println("Customer added to the database successfully.");
                // Optionally, you can clear the text fields after successful insertion
                clearFields();
            } else {
                System.out.println("Failed to add product to the database.");
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            System.out.println("Error adding product to the database.");
        }
    }
   
    private void clearCustFields() {
        textfldCustomer.setText("");
        textfldAddress.setText("");
        textfieldContact.setText("");
    }
    
    private void refCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refCustActionPerformed
        customerRetrieval();
    }//GEN-LAST:event_refCustActionPerformed
    
      private void customerRetrieval() {
    String sql = "SELECT customer_name, address,contact_no, timestamp_column FROM customers " +
                 "ORDER BY timestamp_column DESC";

    try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
         Statement statement = connection.createStatement();
         ResultSet resultSet = statement.executeQuery(sql)) {

        // Check if there are new records based on timestamp or unique identifier
        if (resultSet.next()) {
            Timestamp latestTimestamp = resultSet.getTimestamp("timestamp_column");

            // Compare the latest timestamp with the last retrieved timestamp
            if (lastRetrievedTimestamp == null || lastRetrievedTimestamp.before(latestTimestamp)) {
                // Clear the existing data in the table model
                customerModel.setRowCount(0);

                // Populate the model with retrieved data
                do {
                    String customer_name = resultSet.getString("customer_name");
                    String address = resultSet.getString("address");
                    int contact_no = resultSet.getInt("contact_no");
                    

                    customerModel.addRow(new Object[]{customer_name, address, contact_no});
                } while (resultSet.next());

                // Set the model to the JTable
                tableCustomer.setModel(customerModel);

                // Update the last retrieved timestamp
                lastRetrievedTimestamp = latestTimestamp;
            } else {
                // Data is not updated, no need to refresh
                System.out.println("No new data to refresh.");
            }
        } else {
            // ResultSet is empty, no need to refresh
            System.out.println("No data available in the database.");
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving data from the database.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void delCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delCustActionPerformed
        deleteSelectedCus();
    }//GEN-LAST:event_delCustActionPerformed
    
     private void deleteSelectedCus() {
        // Get the selected row index
        int selectedRowIndex = tableCustomer.getSelectedRow();

        // Check if a row is selected
        if (selectedRowIndex != -1) {
            // Get data from the selected row
            Object custName = tableCustomer.getValueAt(selectedRowIndex, 0);

            // SQL query to delete the row based on the product_id
            String sql = "DELETE FROM customers WHERE customer_name = ?";

            try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
                 PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

                // Set the parameter in the PreparedStatement
                preparedStatement.setObject(1, custName);

                // Execute the DELETE query
                int affectedRows = preparedStatement.executeUpdate();

                // Check if the deletion was successful
                if (affectedRows > 0) {
                    // Remove the selected row from the table model
                    customerModel.removeRow(selectedRowIndex);
                    JOptionPane.showMessageDialog(null, "Row deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to delete row from the database.", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error deleting data from the database.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No row selected.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }
  
    
    private void tableNetSalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableNetSalesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableNetSalesMouseClicked

    private void ordersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersTableMouseClicked
       int selectedRowIndex = ordersTable.rowAtPoint(evt.getPoint());

            // Check if a valid row is clicked
            if (selectedRowIndex != -1) {
                // Assuming the columns are in order: ID, Product, Quantity, Measurement
                Object id = ordersTable.getValueAt(selectedRowIndex, 0);
                Object product = ordersTable.getValueAt(selectedRowIndex, 1);
                Object quantity = ordersTable.getValueAt(selectedRowIndex, 2);
                Object measurement = ordersTable.getValueAt(selectedRowIndex, 3);
                 Object price = ordersTable.getValueAt(selectedRowIndex, 4);
                 

                // Set the values in the JTextFields
                labelProdId.setText(id.toString());
                labelProdu.setText(product.toString());
                fieldQuantity.setText(quantity.toString());
                lableMeasure.setText(measurement.toString());
                labelOrderPrice1.setText(price.toString());
            }
    }//GEN-LAST:event_ordersTableMouseClicked
            
   
    private void updateOrderTotal() {
    // Assuming labelOrderPrice1 and labelQuantity display numeric values as Strings
    String priceString = labelOrderPrice1.getText().replaceAll("[^0-9.]", ""); // Remove non-numeric characters
    String quantityString = fieldQuantity.getText().replaceAll("[^0-9]", ""); // Remove non-numeric characters

    try {
        // Convert the price and quantity Strings to doubles
        double orderPrice = Double.parseDouble(priceString);
        int orderQuantity = Integer.parseInt(quantityString);

        // Calculate the total by multiplying the price and quantity
        double total = orderPrice * orderQuantity;

        // Format the total as a String and set it on orderTotal
        orderTotal.setText(String.format("%.2f", total));
    } catch (NumberFormatException e) {
        // Handle the case where parsing fails (e.g., non-numeric values)
        e.printStackTrace(); // Add appropriate error handling
        orderTotal.setText("Error"); // Set a default value on orderTotal
    }
}
 
    
    private void refreshOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshOrdersActionPerformed
        String selectedCategory = getOrdersCategory();
        ordersRetrieval(selectedCategory);
        populateCustomerNames();
    }//GEN-LAST:event_refreshOrdersActionPerformed
    
     private String getOrdersCategory() {
        String selectedItem = ordersCategory.getSelectedItem().toString();

        // Convert the entire string to uppercase
        return selectedItem.toUpperCase();
    }
    
     private void populateCustomerNames() {
       
        String sql = "SELECT customer_name FROM customers";

        try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
             PreparedStatement preparedStatement = connection.prepareStatement(sql);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            // Clear existing items in the combo box
            comboCusName.removeAllItems();

            // Populate the combo box with customer names
            while (resultSet.next()) {
                String customerName = resultSet.getString("customer_name");
                comboCusName.addItem(customerName);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            System.out.println("Error retrieving customer names from the database.");
        }
    }
    
    private void ordersRetrieval(String category) {
    // SQL query with JOIN and WHERE to retrieve data based on EmployeeId
    String sql = "SELECT cp.prod_id, cp.product_name, cp.quantity, cp.measurement, cp.price " +
                 "FROM categorized_products cp " +
                 "JOIN categories c ON cp.category = c.category  " +
                 "WHERE cp.category = ?";

    try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
         PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

        // Set the parameter in the PreparedStatement
        preparedStatement.setString(1, category);

        // Execute the query
        try (ResultSet resultSet = preparedStatement.executeQuery()) {
            // Clear existing data in the table model
            instocklModel.setRowCount(0);

            // Populate the model with retrieved data
            while (resultSet.next()) {
                String prod_id = resultSet.getString("prod_id");
                String product_name = resultSet.getString("product_name");
                String quantity = resultSet.getString("quantity");
                String measurement = resultSet.getString("measurement");
                String price = resultSet.getString("price");

                instocklModel.addRow(new Object[]{prod_id, product_name, quantity, measurement, price});
            }

            // Set the model to the JTable
            ordersTable.setModel(instocklModel);
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving data from the database.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void comboCusNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCusNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCusNameActionPerformed

    private void totalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalButtonActionPerformed
        updateOrderTotal() ;
    }//GEN-LAST:event_totalButtonActionPerformed

    private void orderAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderAddActionPerformed
       if (orderTotal.getText().trim().isEmpty()) {
    // Show a JOptionPane message if orderTotal is empty
    JOptionPane.showMessageDialog(
            this,
            "Total price is empty. Please add items to calculate the total.",
            "Empty Total Price",
            JOptionPane.WARNING_MESSAGE);
} else {
    // Call the method or perform actions when orderTotal is not empty
    // For example, you can call the method that processes the order
   subtractQuantityAndUpdateDatabase();
        orderTotal.setText("");
}
         
    }//GEN-LAST:event_orderAddActionPerformed

    private void buttonTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTotalActionPerformed
       calculateTotalPayment();
    }//GEN-LAST:event_buttonTotalActionPerformed

    private void customerDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerDelActionPerformed
        deleteSelectedCusRow();
        cusProdID.setText("");
        cusQuan.setText("");
    }//GEN-LAST:event_customerDelActionPerformed

    private void deleteSelectedCusRow() {
    int selectedRow = tablePayment.getSelectedRow();

    if (selectedRow != -1) {
        // Confirm with the user before deleting the row
        int confirmResult = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete this row?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION);

        if (confirmResult == JOptionPane.YES_OPTION) {
            // Remove the selected row from the paymentModel
            AddQuantityAndUpdateDatabase();
            ((DefaultTableModel) tablePayment.getModel()).removeRow(selectedRow);
        }
    } else {
        // Inform the user that no row is selected
        JOptionPane.showMessageDialog(
                this,
                "Please select a row to delete.",
                "Information",
                JOptionPane.INFORMATION_MESSAGE);
    }
}
    
    private void AddQuantityAndUpdateDatabase() {
    // Get the quantity value from the database
    String selectedProductId = cusProdID.getText();  // replace with the actual product ID
    int currentQuantity = getQuantityFromDatabase(selectedProductId);

    // Get the desired quantity from the fieldQuantity text field
    String quantityString = cusQuan.getText();
    
    try {
        int desiredQuantity = Integer.parseInt(quantityString);
        
            int newQuantity = currentQuantity + desiredQuantity;
            
            updateQuantityInDatabase(selectedProductId, newQuantity);

    } catch (NumberFormatException e) {
        // Handle the case where the quantity from the text field is not a valid integer
        e.printStackTrace();
        JOptionPane.showMessageDialog(
            this,
            "Error.",
            "Error",
            JOptionPane.ERROR_MESSAGE
        );
    }
}
    
    private void tablePaymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePaymentMouseClicked
        int selectedRowIndex = tablePayment.rowAtPoint(evt.getPoint());
        
            if (selectedRowIndex != -1) {
               
                Object id = tablePayment.getValueAt(selectedRowIndex, 0);
                Object quantity = tablePayment.getValueAt(selectedRowIndex, 2);
                
                cusProdID.setText(id.toString());
                cusQuan.setText(quantity.toString());
               
            }
    }//GEN-LAST:event_tablePaymentMouseClicked

    private void paymentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentBtnActionPerformed
        int confirmResult = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to clear the table and finalize the order?",
            "Confirmation",
            JOptionPane.YES_NO_OPTION);

    if (confirmResult == JOptionPane.YES_OPTION) {
        // Proceed with clearing the table and other actions
        insertIntoNetSales();

        int rowCount = paymentModel.getRowCount();

        // Remove all rows from the paymentModel
        for (int i = rowCount - 1; i >= 0; i--) {
            paymentModel.removeRow(i);
        }

        // Set the updated model to the tablePayment
        tablePayment.setModel(paymentModel);

        // Clear the labels
        labelCustName.setText("");
        labelTotalPay.setText("");
    }
    }//GEN-LAST:event_paymentBtnActionPerformed

    private void refreshSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshSalesActionPerformed
        transferNetSales();
        calculateTotalNetSales();
    }//GEN-LAST:event_refreshSalesActionPerformed

    private void netsalesBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_netsalesBtnMouseClicked
        jTabbedPane1.setSelectedIndex(0);
        panelswitch2.setText("NET SALES");
    }//GEN-LAST:event_netsalesBtnMouseClicked

    private void supplyBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_supplyBtnMouseClicked
        jTabbedPane1.setSelectedIndex(1);
        panelswitch2.setText("SUPPLIES");
    }//GEN-LAST:event_supplyBtnMouseClicked

    private void instockBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instockBtnMouseClicked
       jTabbedPane1.setSelectedIndex(2);
       panelswitch2.setText("IN-STOCK");
    }//GEN-LAST:event_instockBtnMouseClicked

    private void customerBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerBtnMouseClicked
       jTabbedPane1.setSelectedIndex(3);
       panelswitch2.setText("CUSTOMERS");
    }//GEN-LAST:event_customerBtnMouseClicked

    private void ordersBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersBtnMouseClicked
        jTabbedPane1.setSelectedIndex(4);
        panelswitch2.setText("ORDERS");
    }//GEN-LAST:event_ordersBtnMouseClicked

    private void paymentBttnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentBttnMouseClicked
        jTabbedPane1.setSelectedIndex(5);
        panelswitch2.setText("PAYMENT");
    }//GEN-LAST:event_paymentBttnMouseClicked

    private void logoutBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutBtnMouseClicked
        int confirmResult = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to log out?",
            "Logout Confirmation",
            JOptionPane.YES_NO_OPTION);

    if (confirmResult == JOptionPane.YES_OPTION) {
        
        this.setVisible(false);
        new StartPanel().setVisible(true);
        }
    }//GEN-LAST:event_logoutBtnMouseClicked

    private void netsalesBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_netsalesBtnMousePressed
         netsalesPane.setBackground(clickedcolor);
        supplyPane.setBackground(defaultcolor);
        instockPan.setBackground(defaultcolor);
        customerPan.setBackground(defaultcolor);
        ordersPan.setBackground(defaultcolor);
        paymentPan.setBackground(defaultcolor);
        logoutPan.setBackground(defaultcolor);
        
        netsalesBtn.setForeground(blue);
         supplyBtn.setForeground(white);
         instockBtn.setForeground(white);
         customerBtn.setForeground(white);
         ordersBtn.setForeground(white);
         paymentBttn.setForeground(white);
         logoutBtn.setForeground(white);
    }//GEN-LAST:event_netsalesBtnMousePressed

    private void netsalesBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_netsalesBtnMouseReleased
         netsalesPane.setBackground(defaultcolor);
    }//GEN-LAST:event_netsalesBtnMouseReleased

    private void supplyBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_supplyBtnMousePressed
         netsalesPane.setBackground(defaultcolor);
        supplyPane.setBackground(clickedcolor);
        instockPan.setBackground(defaultcolor);
        customerPan.setBackground(defaultcolor);
        ordersPan.setBackground(defaultcolor);
        paymentPan.setBackground(defaultcolor);
        logoutPan.setBackground(defaultcolor);
        
        netsalesBtn.setForeground(white);
         supplyBtn.setForeground(blue);
         instockBtn.setForeground(white);
         customerBtn.setForeground(white);
         ordersBtn.setForeground(white);
         paymentBttn.setForeground(white);
         logoutBtn.setForeground(white);
    }//GEN-LAST:event_supplyBtnMousePressed

    private void supplyBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_supplyBtnMouseReleased
       supplyPane.setBackground(defaultcolor);
    }//GEN-LAST:event_supplyBtnMouseReleased

    private void instockBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instockBtnMousePressed
        netsalesPane.setBackground(defaultcolor);
        supplyPane.setBackground(defaultcolor);
        instockPan.setBackground(clickedcolor);
        customerPan.setBackground(defaultcolor);
        ordersPan.setBackground(defaultcolor);
        paymentPan.setBackground(defaultcolor);
        logoutPan.setBackground(defaultcolor);
        
        netsalesBtn.setForeground(white);
         supplyBtn.setForeground(white);
         instockBtn.setForeground(blue);
         customerBtn.setForeground(white);
         ordersBtn.setForeground(white);
         paymentBttn.setForeground(white);
         logoutBtn.setForeground(white);
    }//GEN-LAST:event_instockBtnMousePressed

    private void instockBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instockBtnMouseReleased
      instockPan.setBackground(defaultcolor);
    }//GEN-LAST:event_instockBtnMouseReleased

    private void customerBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerBtnMousePressed
         netsalesPane.setBackground(defaultcolor);
        supplyPane.setBackground(defaultcolor);
        instockPan.setBackground(defaultcolor);
        customerPan.setBackground(clickedcolor);
        ordersPan.setBackground(defaultcolor);
        paymentPan.setBackground(defaultcolor);
        logoutPan.setBackground(defaultcolor);
        
        netsalesBtn.setForeground(white);
         supplyBtn.setForeground(white);
         instockBtn.setForeground(white);
         customerBtn.setForeground(blue);
         ordersBtn.setForeground(white);
         paymentBttn.setForeground(white);
         logoutBtn.setForeground(white);
    }//GEN-LAST:event_customerBtnMousePressed

    private void customerBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerBtnMouseReleased
      customerPan.setBackground(defaultcolor);
    }//GEN-LAST:event_customerBtnMouseReleased

    private void ordersBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersBtnMousePressed
        netsalesPane.setBackground(defaultcolor);
        supplyPane.setBackground(defaultcolor);
        instockPan.setBackground(defaultcolor);
        customerPan.setBackground(defaultcolor);
        ordersPan.setBackground(clickedcolor);
        paymentPan.setBackground(defaultcolor);
        logoutPan.setBackground(defaultcolor);
        
        netsalesBtn.setForeground(white);
         supplyBtn.setForeground(white);
         instockBtn.setForeground(white);
         customerBtn.setForeground(white);
         ordersBtn.setForeground(blue);
         paymentBttn.setForeground(white);
         logoutBtn.setForeground(white);
    }//GEN-LAST:event_ordersBtnMousePressed

    private void ordersBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersBtnMouseReleased
       ordersPan.setBackground(defaultcolor);
    }//GEN-LAST:event_ordersBtnMouseReleased

    private void paymentBttnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentBttnMousePressed
       netsalesPane.setBackground(defaultcolor);
        supplyPane.setBackground(defaultcolor);
        instockPan.setBackground(defaultcolor);
        customerPan.setBackground(defaultcolor);
        ordersPan.setBackground(defaultcolor);
        paymentPan.setBackground(clickedcolor);
        logoutPan.setBackground(defaultcolor);
        
        netsalesBtn.setForeground(white);
         supplyBtn.setForeground(white);
         instockBtn.setForeground(white);
         customerBtn.setForeground(white);
         ordersBtn.setForeground(white);
         paymentBttn.setForeground(blue);
         logoutBtn.setForeground(white);
    }//GEN-LAST:event_paymentBttnMousePressed

    private void paymentBttnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentBttnMouseReleased
        paymentPan.setBackground(defaultcolor);
    }//GEN-LAST:event_paymentBttnMouseReleased

    private void logoutBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutBtnMousePressed
        netsalesPane.setBackground(defaultcolor);
        supplyPane.setBackground(defaultcolor);
        instockPan.setBackground(defaultcolor);
        customerPan.setBackground(defaultcolor);
        ordersPan.setBackground(defaultcolor);
        paymentPan.setBackground(defaultcolor);
        logoutPan.setBackground(clickedcolor);
        
        netsalesBtn.setForeground(white);
         supplyBtn.setForeground(white);
         instockBtn.setForeground(white);
         customerBtn.setForeground(white);
         ordersBtn.setForeground(white);
         paymentBttn.setForeground(white);
         logoutBtn.setForeground(blue);
    }//GEN-LAST:event_logoutBtnMousePressed

    private void logoutBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutBtnMouseReleased
        logoutPan.setBackground(defaultcolor);
    }//GEN-LAST:event_logoutBtnMouseReleased
   
    private void calculateTotalNetSales() {
    double totalPayment = 0.0;

    // Iterate over rows and sum up the values in the "TOTAL" column
    for (int row = 0; row < tableNetSales.getRowCount(); row++) {
        double totalForRow = (double) tableNetSales.getValueAt(row, 2); // Assuming "TOTAL" is at column index 5
        totalPayment += totalForRow;
    }

    // Set the total payment to labelTotalPay
    totaSales.setText(String.format("$%.2f", totalPayment));
}
    
     private void transferNetSales() {
        // Assuming you have a JDBC connection
        try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD)) {
            // Replace "your_database", "your_username", and "your_password" with your actual database information

            // Assuming you have a unique ID column in net_sales
            String sql = "SELECT * FROM net_sales";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    // Clear the existing data in tableNetSales
                    netsalesModel.setRowCount(0);

                    // Fetch data from net_sales and add it to tableNetSales
                    while (resultSet.next()) {
                        Object[] row = {
                                resultSet.getString("customer_name"),
                                resultSet.getString("timestamp_column"),
                                resultSet.getDouble("total_pay")
                        };
                        netsalesModel.addRow(row);
                        tableNetSales.setModel(netsalesModel);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception as needed
        }
    }
    
    private void insertIntoNetSales() {
    // Get values from JLabels
    String customerName = labelCustName.getText();
    String totalPayString = labelTotalPay.getText().replaceAll("[^0-9.]", ""); // Remove non-numeric characters

    try {
        // Convert totalPayString to a double
        double totalPay = Double.parseDouble(totalPayString);

        // Perform INSERT operation into the net_sales table
        String sql = "INSERT INTO net_sales (customer_name, total_pay) VALUES (?, ?)";
        try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

            preparedStatement.setString(1, customerName);
            preparedStatement.setDouble(2, totalPay);

            int affectedRows = preparedStatement.executeUpdate();

            if (affectedRows > 0) {
                // Insert successful
                JOptionPane.showMessageDialog(
                        this,
                        "PAYMENT SUCCESFUL.",
                        "Success",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Insert failed
                JOptionPane.showMessageDialog(
                        this,
                        "ERROR: PAYMENT UMSUCCESSFUL",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(
                    this,
                    "Error accessing database.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        // Handle the case where totalPayString is not a valid double
        e.printStackTrace();
        JOptionPane.showMessageDialog(
                this,
                "Please enter a valid total payment.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void subtractQuantityAndUpdateDatabase() {
    // Get the quantity value from the database
    String selectedProductId = labelProdId.getText();  // replace with the actual product ID
    int currentQuantity = getQuantityFromDatabase(selectedProductId);

    // Get the desired quantity from the fieldQuantity text field
    String quantityString = fieldQuantity.getText();
    
    try {
        int desiredQuantity = Integer.parseInt(quantityString);
        
        // Check if there is enough quantity in the database
        if (currentQuantity >= desiredQuantity) {
            // Subtract the quantity in the database
            int newQuantity = currentQuantity - desiredQuantity;
            addToPaymentModel();
            updateLabelCustName();
            // Update the quantity in the database
            updateQuantityInDatabase(selectedProductId, newQuantity);

            // Proceed with your further logic here

        } else {
            // Show a warning if the desired quantity is greater than the available quantity
            JOptionPane.showMessageDialog(
                this,
                "Not enough quantity available in the database!",
                "Warning",
                JOptionPane.WARNING_MESSAGE
            );
        }

    } catch (NumberFormatException e) {
        // Handle the case where the quantity from the text field is not a valid integer
        e.printStackTrace();
        JOptionPane.showMessageDialog(
            this,
            "Please enter a valid quantity.",
            "Error",
            JOptionPane.ERROR_MESSAGE
        );
    }
}

// Method to get the current quantity from the database
private int getQuantityFromDatabase(String productId) {
    String sql = "SELECT quantity FROM categorized_products WHERE prod_id = ?";
    
    try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
         PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

        preparedStatement.setString(1, productId);

        try (ResultSet resultSet = preparedStatement.executeQuery()) {
            if (resultSet.next()) {
                return resultSet.getInt("quantity");
            }
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error accessing database.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    return 0; // Return 0 if there is an error or the product is not found
}

// Method to update the quantity in the database
private void updateQuantityInDatabase(String productId, int newQuantity) {
    String sql = "UPDATE categorized_products SET quantity = ? WHERE prod_id = ?";
    
    try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
         PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

        preparedStatement.setInt(1, newQuantity);
        preparedStatement.setString(2, productId);

        int affectedRows = preparedStatement.executeUpdate();

        if (affectedRows > 0) {
            System.out.println("Quantity updated successfully.");
        } else {
            System.out.println("Failed to update quantity.");
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating database.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void calculateTotalPayment() {
    double totalPayment = 0.0;

    // Iterate over rows and sum up the values in the "TOTAL" column
    for (int row = 0; row < paymentModel.getRowCount(); row++) {
        double totalForRow = (double) paymentModel.getValueAt(row, 5); // Assuming "TOTAL" is at column index 5
        totalPayment += totalForRow;
    }

    // Set the total payment to labelTotalPay
    labelTotalPay.setText(String.format("%.2f", totalPayment));
}
    
    private void addToPaymentModel() {
    // Get values from components
    String prodId = labelProdId.getText();
    String product = labelProdu.getText();
    String measurement = lableMeasure.getText();
    String orderPriceString = labelOrderPrice1.getText().replaceAll("[^0-9.]", "");
    String quantityString = fieldQuantity.getText().replaceAll("[^0-9]", "");
    String orderTotalString = orderTotal.getText().replaceAll("[^0-9.]", "");

    try {
        // Parse values to appropriate types
        double orderPrice = Double.parseDouble(orderPriceString);
        int quantity = Integer.parseInt(quantityString);
        double total = Double.parseDouble(orderTotalString);

        // Add a new row to the paymentModel
        paymentModel.addRow(new Object[]{prodId, product, quantity, measurement, orderPrice, total});

        // Set the model to the ordersTable
        tablePayment.setModel(paymentModel);
    } catch (NumberFormatException ex) {
        // Handle the case where parsing fails (e.g., non-numeric values)
        ex.printStackTrace(); // Add appropriate error handling
    }
}
  
    private void updateLabelCustName() {
    Object selectedValue = comboCusName.getSelectedItem();

    if (selectedValue != null) {
        labelCustName.setText(selectedValue.toString());
    } else {
        // Handle the case where no item is selected
        labelCustName.setText("No Customer Selected");
    }
}

    
   
   
     
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PresentDate2;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton addCust;
    private javax.swing.JButton buttonTotal;
    private javax.swing.JLabel catID;
    private javax.swing.JComboBox<String> cmboxCat;
    private javax.swing.JComboBox<String> cmboxInStockCat;
    private javax.swing.JComboBox<String> comboCusName;
    private javax.swing.JLabel cusProdID;
    private javax.swing.JLabel cusQuan;
    private javax.swing.JLabel customerBtn;
    private javax.swing.JButton customerDel;
    private javax.swing.JPanel customerPan;
    private javax.swing.JPanel customerPane;
    private javax.swing.JButton delBtn;
    private javax.swing.JButton delCust;
    private javax.swing.JPanel deliveredPane;
    private javax.swing.JTextField fieldQuantity;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel instockBtn;
    private javax.swing.JPanel instockPan;
    private javax.swing.JPanel instockPane;
    private javax.swing.JTable instockTable;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator15;
    private javax.swing.JSeparator jSeparator17;
    private javax.swing.JSeparator jSeparator18;
    private javax.swing.JSeparator jSeparator19;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelCustName;
    private javax.swing.JLabel labelMeasure;
    private javax.swing.JLabel labelOrderPrice1;
    private javax.swing.JLabel labelPrice;
    private javax.swing.JLabel labelProdId;
    private javax.swing.JLabel labelProdu;
    private javax.swing.JLabel labelTotalPay;
    private javax.swing.JLabel lableMeasure;
    private javax.swing.JLabel logoutBtn;
    private javax.swing.JPanel logoutPan;
    private javax.swing.JTextField measurementField;
    private javax.swing.JLabel netsalesBtn;
    private javax.swing.JPanel netsalesPane;
    private javax.swing.JButton orderAdd;
    private javax.swing.JLabel orderTotal;
    private javax.swing.JLabel ordersBtn;
    private javax.swing.JComboBox<String> ordersCategory;
    private javax.swing.JPanel ordersPan;
    private javax.swing.JPanel ordersPane;
    private javax.swing.JTable ordersTable;
    private javax.swing.JLabel panelswitch2;
    private javax.swing.JButton paymentBtn;
    private javax.swing.JLabel paymentBttn;
    private javax.swing.JPanel paymentPan;
    private javax.swing.JPanel paymentPanel;
    private javax.swing.JTextField priceField;
    private javax.swing.JTextField productField;
    private javax.swing.JTextField quantityField;
    private javax.swing.JButton refBtn;
    private javax.swing.JButton refCust;
    private javax.swing.JButton refreshOrders;
    private javax.swing.JButton refreshSales;
    private javax.swing.JButton refreshStock;
    private javax.swing.JPanel salesPane;
    private javax.swing.JTable stockTable;
    private javax.swing.JLabel supplyBtn;
    private javax.swing.JPanel supplyPane;
    private javax.swing.JTable tableCustomer;
    private javax.swing.JTable tableNetSales;
    private javax.swing.JTable tablePayment;
    private javax.swing.JTextField textfieldContact;
    private javax.swing.JTextField textfldAddress;
    private javax.swing.JTextField textfldCustomer;
    private javax.swing.JLabel totaSales;
    private javax.swing.JButton totalButton;
    // End of variables declaration//GEN-END:variables
}
